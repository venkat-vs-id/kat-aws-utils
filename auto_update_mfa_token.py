#!/usr/bin/env python -tt
"""
This how your sample credential file will look like

[AutoGeneratedRootAccountMFA]
region=ap-northeast-1
output=json

[RootAccount]
aws_access_key_id=<....>
aws_secret_access_key=<....>
region=ap-northeast-1
output=json

[default]
role_arn = arn:aws:iam::<aws-account-id>>:role/<switch-role>
role_name = <switch-role-name>
region = ap-northeast-1
source_profile=AutoGeneratedRootAccountMFA

"""
import sys
import logging as logger
from datetime import datetime
import boto3

C_MFA_SERIAL = 'arn:aws:iam::<aws-account-id>:mfa/<aws-user-id>'
C_CREDENTIAL_FILE_WITH_PATH = '/path/to/.aws/credentials'
#---- this is the profile to which  your MFA_SERIAL is linked
C_ROOT_PROFILE = 'RootAccount'
C_MFA_PROFILE = 'AutoGeneratedRootAccountMFA'

def main(p_mfa):

    #---- get the token
    l_session = boto3.Session(profile_name='TechConnect')
    lo_stsc = l_session.client('sts')
    ld_res = lo_stsc.get_session_token(DurationSeconds=129600, #--- 36 hours
                                       SerialNumber=C_MFA_SERIAL,
                                       TokenCode='%s' % p_mfa)
    #print(ld_res)
    l_aws_access_key_id = ld_res['Credentials']['AccessKeyId']
    l_aws_secret_access_key = ld_res['Credentials']['SecretAccessKey']
    l_aws_session_token = ld_res['Credentials']['SessionToken']

    #---- update the token on the credentials file
    with open(C_CREDENTIAL_FILE_WITH_PATH, 'r') as f:
        larr_lines = f.readlines()
    #end with

    #---- take a back-up of the credentials file
    #print(larr_lines)
    l_curr_dt_str = datetime.now().strftime("%Y%m%d_%H%M%S")
    l_backp_file = '%s_%s' %(C_CREDENTIAL_FILE_WITH_PATH, l_curr_dt_str)
    with open(l_backp_file, 'w') as f:
        f.write(''.join(larr_lines))
    #end with
    print('BACK-up of File is done. File name ====> %s' % l_backp_file)

    larr_lines_new = []
    l_mfa_profile_set = False
    l_profile = '--'
    for linex in larr_lines:
        if '[' in linex and ']' in linex:
            l_profile = linex.replace('[', '').replace(']', '').strip()
            #print('l_profile= %s ' % l_profile)
            if l_profile == C_MFA_PROFILE:
                print('-********* updating the credentials file with the token ********')
                larr_lines_new.append(linex)
                larr_lines_new.append('aws_access_key_id=%s\n' % l_aws_access_key_id)
                larr_lines_new.append('aws_secret_access_key=%s\n' % l_aws_secret_access_key)
                larr_lines_new.append('aws_session_token=%s\n' % l_aws_session_token)
                l_mfa_profile_set = True
                continue
            #end if
        #end if

        if l_profile == C_MFA_PROFILE and \
            ('aws_access_key_id' in linex or 'aws_secret_access_key' in linex or 'aws_session_token' in linex):
            continue
        #end if

        larr_lines_new.append(linex)
    #end for

    #---- create the new file
    if l_mfa_profile_set:
        print('.')
        print('************ updating the existing credentials file ****************')
        print('.')
        with open(C_CREDENTIAL_FILE_WITH_PATH, 'w') as f:
            f.write(''.join(larr_lines_new))
        #end with
    #end if

    print('..........................................................')
    print('aws_access_key_id=%s' % l_aws_access_key_id)
    print('aws_secret_access_key=%s' % l_aws_secret_access_key)
    print('aws_session_token=%s' % l_aws_session_token)
    print('..........................  done ................................')

    return 0
#-----------------------------------------------------------------------------------------------------------------------
if __name__ == "__main__":

    print(sys.argv)
    main(p_mfa=sys.argv[1])